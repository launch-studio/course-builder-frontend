import { TelegramMessage, TelegramUser, TelegramChat } from '../../types';

interface TelegramBotConfig {
  token: string;
  webhookUrl?: string;
}

interface TelegramResponse {
  ok: boolean;
  result?: any;
  error_code?: number;
  description?: string;
}

class TelegramService {
  private token: string;
  private baseUrl: string;

  constructor(config: TelegramBotConfig) {
    this.token = config.token;
    this.baseUrl = `https://api.telegram.org/bot${this.token}`;
  }

  // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –±–æ—Ç–∞
  async sendMessage(chatId: number, text: string, options?: any): Promise<TelegramResponse> {
    try {
      const response = await fetch(`${this.baseUrl}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: chatId,
          text,
          parse_mode: 'HTML',
          ...options
        }),
      });

      return await response.json();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      throw error;
    }
  }

  async sendKeyboard(chatId: number, text: string, keyboard: any): Promise<TelegramResponse> {
    return this.sendMessage(chatId, text, {
      reply_markup: {
        keyboard: keyboard,
        resize_keyboard: true,
        one_time_keyboard: false
      }
    });
  }

  async sendInlineKeyboard(chatId: number, text: string, inlineKeyboard: any): Promise<TelegramResponse> {
    return this.sendMessage(chatId, text, {
      reply_markup: {
        inline_keyboard: inlineKeyboard
      }
    });
  }

  async editMessage(chatId: number, messageId: number, text: string, options?: any): Promise<TelegramResponse> {
    try {
      const response = await fetch(`${this.baseUrl}/editMessageText`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: chatId,
          message_id: messageId,
          text,
          parse_mode: 'HTML',
          ...options
        }),
      });

      return await response.json();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      throw error;
    }
  }

  async deleteMessage(chatId: number, messageId: number): Promise<TelegramResponse> {
    try {
      const response = await fetch(`${this.baseUrl}/deleteMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: chatId,
          message_id: messageId
        }),
      });

      return await response.json();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      throw error;
    }
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
  async sendDocument(chatId: number, document: File | string, caption?: string): Promise<TelegramResponse> {
    try {
      const formData = new FormData();
      formData.append('chat_id', chatId.toString());
      
      if (typeof document === 'string') {
        formData.append('document', document);
      } else {
        formData.append('document', document);
      }
      
      if (caption) {
        formData.append('caption', caption);
      }

      const response = await fetch(`${this.baseUrl}/sendDocument`, {
        method: 'POST',
        body: formData,
      });

      return await response.json();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);
      throw error;
    }
  }

  async sendPhoto(chatId: number, photo: File | string, caption?: string): Promise<TelegramResponse> {
    try {
      const formData = new FormData();
      formData.append('chat_id', chatId.toString());
      
      if (typeof photo === 'string') {
        formData.append('photo', photo);
      } else {
        formData.append('photo', photo);
      }
      
      if (caption) {
        formData.append('caption', caption);
      }

      const response = await fetch(`${this.baseUrl}/sendPhoto`, {
        method: 'POST',
        body: formData,
      });

      return await response.json();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ:', error);
      throw error;
    }
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
  async getMe(): Promise<TelegramResponse> {
    try {
      const response = await fetch(`${this.baseUrl}/getMe`);
      return await response.json();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ:', error);
      throw error;
    }
  }

  async getUpdates(offset?: number, limit?: number): Promise<TelegramResponse> {
    try {
      const params = new URLSearchParams();
      if (offset) params.append('offset', offset.toString());
      if (limit) params.append('limit', limit.toString());

      const response = await fetch(`${this.baseUrl}/getUpdates?${params}`);
      return await response.json();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', error);
      throw error;
    }
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook
  async setWebhook(url: string, certificate?: File): Promise<TelegramResponse> {
    try {
      const formData = new FormData();
      formData.append('url', url);
      
      if (certificate) {
        formData.append('certificate', certificate);
      }

      const response = await fetch(`${this.baseUrl}/setWebhook`, {
        method: 'POST',
        body: formData,
      });

      return await response.json();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', error);
      throw error;
    }
  }

  async deleteWebhook(): Promise<TelegramResponse> {
    try {
      const response = await fetch(`${this.baseUrl}/deleteWebhook`, {
        method: 'POST',
      });

      return await response.json();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook:', error);
      throw error;
    }
  }

  // –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
  parseMessage(message: any): TelegramMessage | null {
    try {
      return {
        message_id: message.message_id,
        from: message.from,
        chat: message.chat,
        text: message.text,
        entities: message.entities
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      return null;
    }
  }

  // –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –±–æ—Ç–∞
  createMainMenu() {
    return [
      [
        { text: 'üéØ –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç' },
        { text: 'üìÅ –ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã' }
      ],
      [
        { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' },
        { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏' }
      ],
      [
        { text: '‚ùì –ü–æ–º–æ—â—å' }
      ]
    ];
  }

  createContentTypeMenu() {
    return [
      [
        { text: 'üìÑ –õ–µ–Ω–¥–∏–Ω–≥' },
        { text: 'üìß Email-—Ä–∞—Å—Å—ã–ª–∫–∞' }
      ],
      [
        { text: 'üéØ –õ–∏–¥-–º–∞–≥–Ω–∏—Ç' },
        { text: 'üìä –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è' }
      ],
      [
        { text: 'üéÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤' },
        { text: 'üì± –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏' }
      ],
      [
        { text: '‚öñÔ∏è –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã' }
      ],
      [
        { text: 'üîô –ù–∞–∑–∞–¥' }
      ]
    ];
  }

  createNicheMenu() {
    return [
      [
        { text: 'üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ' },
        { text: 'üíº –ë–∏–∑–Ω–µ—Å' }
      ],
      [
        { text: 'üè• –ó–¥–æ—Ä–æ–≤—å–µ' },
        { text: 'üí∞ –§–∏–Ω–∞–Ω—Å—ã' }
      ],
      [
        { text: 'üåü –û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏' }
      ],
      [
        { text: 'üîô –ù–∞–∑–∞–¥' }
      ]
    ];
  }

  createInlineKeyboard(buttons: Array<Array<{ text: string; callback_data: string }>>) {
    return {
      inline_keyboard: buttons
    };
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
  async answerCallbackQuery(callbackQueryId: string, text?: string, showAlert?: boolean): Promise<TelegramResponse> {
    try {
      const response = await fetch(`${this.baseUrl}/answerCallbackQuery`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          callback_query_id: callbackQueryId,
          text,
          show_alert: showAlert
        }),
      });

      return await response.json();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback:', error);
      throw error;
    }
  }
}

export default TelegramService;
